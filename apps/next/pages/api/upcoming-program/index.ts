import { NextApiRequest, NextApiResponse } from 'next'

import { GoogleSpreadsheet } from 'google-spreadsheet'
import { JWT } from 'google-auth-library'

const keys = require('../../../tee-services-db47a9e534d3.json')

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  get_upcoming_program()
    .then((result) => {
      res.status(200).json(result)
    })
    .catch((error) => {
      console.log('error', error)
      res.status(500).json({ failed: error })
    })
}

const PAGE1 = 0
const DATE_INDEX = 0

async function get_upcoming_program() {
  try {
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: keys.client_email,
      key: keys.private_key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })
    const sheetId = keys.sheet_ids[sheetKey]?.key
    const doc = new GoogleSpreadsheet(sheetId, serviceAccountAuth)

    await doc.loadInfo(true) // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[PAGE1] // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    const rows = await sheet.getRows()
    const data = rows.map((row) => {
      const cell = sheet.getCell(row.rowNumber - 1, DATE_INDEX)
      const date = getDateFromGoogle(cell.value as number).toISOString()
      // extract the "Google Date" and convert to something readable.
      const arrangement = row.toObject()
      arrangement['Date'] = date
      return arrangement
    })

    return { title: doc.title, type: sheetKey, content: data }
  } catch (error) {
    throw error
  }
}

function getDateFromGoogle(serialNumber: number): Date {
  return new Date((serialNumber - 25569) * 86400000)
}
