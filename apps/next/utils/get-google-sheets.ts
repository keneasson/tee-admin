'use server'

import { JWT } from 'google-auth-library'
import { GoogleSpreadsheet } from 'google-spreadsheet'
import { convertGoogleDate } from './convert-google-date'
import teeServicesDb from '../tee-services-db47a9e534d3.json'

const PAGE1 = 0
const DATE_INDEX = 0

export async function get_google_sheet(sheetKey: string) {
  if (!Object.keys(teeServicesDb['sheet_ids']).includes(sheetKey)) {
    throw new Error('Invalid Google Sheet')
  }
  const safeKey = sheetKey as keyof typeof teeServicesDb.sheet_ids
  try {
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: teeServicesDb.client_email,
      key: teeServicesDb.private_key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })
    const googleSheet = teeServicesDb['sheet_ids'][safeKey]
    const sheetId = googleSheet.key
    const doc = new GoogleSpreadsheet(sheetId, serviceAccountAuth)

    await doc.loadInfo(true) // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[PAGE1] // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    const rows = await sheet.getRows()
    const data = rows.map((row) => {
      if (sheetKey === 'directory') {
        return row.toObject()
      }
      const cell = sheet.getCell(row.rowNumber - 1, DATE_INDEX)
      const date = convertGoogleDate(googleSheet, cell.value as number)
      // extract the "Google Date" and convert to something readable.
      const arrangement = row.toObject()
      arrangement['Date'] = date
      return arrangement
    })

    return { title: doc.title, type: sheetKey, content: data }
  } catch (error) {
    throw error
  }
}
