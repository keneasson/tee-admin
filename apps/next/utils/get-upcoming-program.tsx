import { JWT } from 'google-auth-library'
import { GoogleSpreadsheet } from 'google-spreadsheet'
import { convertGoogleDate } from './convert-google-date'
import { convertHumanReadableDate } from './date'

import type { ProgramTypeKeys, ProgramTypes } from '@my/app/types'

import teeServicesDb from '../tee-services-db47a9e534d3.json'

const PAGE1 = 0
const DATE_INDEX = 0

export async function get_upcoming_program(
  orderOfKeys: ProgramTypeKeys[]
): Promise<ProgramTypes[]> {
  try {
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: teeServicesDb.client_email,
      key: teeServicesDb.private_key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })

    const NOW = new Date()
    const upcoming = await orderOfKeys.reduce(
      async (
        accPromise: Promise<ProgramTypes[]>,
        sheetKey: ProgramTypeKeys
      ): Promise<ProgramTypes[]> => {
        const program = await accPromise
        const more = await findNextProgram(sheetKey, serviceAccountAuth, NOW)
        return [...program, ...more]
      },
      Promise.resolve([])
    )
    return upcoming.sort((a, b) => {
      const ad = typeof a.Date === 'string' ? new Date(a.Date) : a.Date
      const bd = typeof b.Date === 'string' ? new Date(b.Date) : b.Date
      return ad.getTime() - bd.getTime()
    })
  } catch (error) {
    throw error
  }
}

/**
 * get the next two events from a specific Google Sheet
 * @param sheetKey
 * @param auth
 * @param today
 * @TODO - simplify if we can force ProgramTypes to only be Date objects, not | string.
 */
async function findNextProgram<FindNextProgramProps>(
  sheetKey: ProgramTypeKeys,
  auth: JWT,
  today: Date
): Promise<ProgramTypes[]> {
  const sheetId = teeServicesDb.sheet_ids[sheetKey as keyof typeof teeServicesDb.sheet_ids]?.key

  const doc = new GoogleSpreadsheet(sheetId, auth)
  await doc.loadInfo(true) // loads document properties and worksheets
  const sheet = doc.sheetsByIndex[PAGE1] // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
  const rows = await sheet.getRows()
  const googleSheet = teeServicesDb['sheet_ids'][sheetKey]
  const index = rows.findIndex((row) => {
    const cell = sheet.getCell(row.rowNumber - 1, DATE_INDEX)
    const date = convertGoogleDate(googleSheet, cell.value as number)
    return date.getTime() >= today.getTime()
  })
  const upcomingRows = rows.slice(index, index + 2)
  return upcomingRows.map((row): ProgramTypes => {
    const event = row.toObject() as Omit<ProgramTypes, 'Key'>
    const cell = sheet.getCell(row.rowNumber - 1, DATE_INDEX)
    const eventDate = convertGoogleDate(googleSheet, cell.value as number)
    return {
      ...event,
      Date: convertHumanReadableDate(eventDate),
      Key: sheetKey,
    } as ProgramTypes
  })
}
